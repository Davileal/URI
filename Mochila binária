//Algoritmo da mochila 0/1 usando programação dinâmica
#include <iostream>
#include <algorithm>

using namespace std;

int mochilaBinaria(int W, int wt[], int b[], int n){
    //tabela que será preenchida
    int V[n+1][W+1];
    //inicializando a primeira linha e primeira coluna com 0
    for(int w=0; w<=W; w++){
        V[0][w] = 0;
    }
    for(int i=0; i<=n; i++){
        V[i][0] = 0;
    }
    for(int i=1; i<=n; i++){
        for(int w=1; w<=W; w++){
            //Elemento pode fazer parte da solução
            if(wt[i-1] <= w){
                if((b[i-1] + V[i-1][w - wt[i-1]]) > V[i-1][w]){
                    V[i][w] = b[i-1] + V[i-1][w - wt[i-1]];
                }
                else{
                    V[i][w] = V[i - 1][w];
                }
            }
            else{
                V[i][w] = V[i - 1][w];
            }
        }
    }
    //retorna valor máximo colocado na mochila
    return V[n][W];
}

int main(){
    //Capacidade máxima da mochila: W
    int W = 23;
    //Número de elementos
    int n = 5;
    //vetor com os valores (benefício) de cada elemento
    int b[] = {43,4,17,13,54};
    //Vetor com os pesos de cada elemento
    int wt[] = {9,1,2,5,17};
    //Obter o máximo valor que pode ser colocado na mochila
    int max_valor = mochilaBinaria(W,wt,b,n);
    cout<<"Valor maximo :"<<max_valor<<endl;
    return 0;
}
